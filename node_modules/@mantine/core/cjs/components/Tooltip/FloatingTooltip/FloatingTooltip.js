'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var styles = require('@mantine/styles');
var hooks = require('@mantine/hooks');
var FloatingTooltip_styles = require('./FloatingTooltip.styles.js');
var Box = require('../../Box/Box.js');
var Transition = require('../../Transition/Transition.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const defaultProps = {
  openDelay: 0,
  closeDelay: 0,
  color: "gray",
  disabled: false,
  position: "right",
  transition: "pop-top-left",
  transitionDuration: 0,
  zIndex: styles.getDefaultZIndex("popover"),
  width: "auto",
  wrapLines: false,
  positionDependencies: []
};
const FloatingTooltip = React.forwardRef((props, ref) => {
  const _a = styles.useMantineDefaultProps("FloatingTooltip", defaultProps, props), {
    className,
    label,
    children,
    openDelay,
    closeDelay,
    color,
    radius,
    disabled,
    position,
    transition,
    transitionDuration,
    zIndex,
    transitionTimingFunction,
    width,
    wrapLines,
    positionDependencies,
    tooltipRef,
    tooltipId,
    classNames,
    styles: styles$1,
    onMouseLeave,
    onMouseEnter
  } = _a, others = __objRest(_a, [
    "className",
    "label",
    "children",
    "openDelay",
    "closeDelay",
    "color",
    "radius",
    "disabled",
    "position",
    "transition",
    "transitionDuration",
    "zIndex",
    "transitionTimingFunction",
    "width",
    "wrapLines",
    "positionDependencies",
    "tooltipRef",
    "tooltipId",
    "classNames",
    "styles",
    "onMouseLeave",
    "onMouseEnter"
  ]);
  const { classes, cx } = FloatingTooltip_styles['default']({ color, radius }, { classNames, styles: styles$1, name: "FloatingTooltip" });
  const openTimeoutRef = React.useRef();
  const closeTimeoutRef = React.useRef();
  const _tooltipRef = React.useRef();
  const mergedTooltipRefs = hooks.useMergedRef(_tooltipRef, tooltipRef);
  const [opened, setOpened] = React.useState(false);
  const { ref: mouseRef, x, y } = hooks.useMouse();
  const visible = opened && !disabled;
  const mergedRefs = hooks.useMergedRef(ref, mouseRef);
  const coordinates = React.useMemo(() => {
    var _a2, _b;
    const estimatedCursorSize = 32;
    const tooltipWidth = typeof width === "number" ? width : ((_a2 = _tooltipRef.current) == null ? void 0 : _a2.offsetWidth) || 0;
    const tooltipHeight = ((_b = _tooltipRef.current) == null ? void 0 : _b.offsetHeight) || 0;
    switch (position) {
      case "top":
        return {
          left: x - tooltipWidth / 2,
          top: y - tooltipHeight
        };
      case "left":
        return {
          left: x - tooltipWidth - estimatedCursorSize / 2,
          top: y
        };
      case "right":
        return {
          left: x + estimatedCursorSize / 2,
          top: y
        };
      case "bottom":
        return {
          left: x - tooltipWidth / 2,
          top: y + tooltipHeight
        };
      default:
        return {
          left: x || 0,
          top: y || 0
        };
    }
  }, [x, y, ...positionDependencies]);
  const handleOpen = () => {
    window.clearTimeout(closeTimeoutRef.current);
    if (openDelay !== 0) {
      openTimeoutRef.current = window.setTimeout(() => {
        setOpened(true);
      }, openDelay);
    } else {
      setOpened(true);
    }
  };
  const handleClose = () => {
    window.clearTimeout(openTimeoutRef.current);
    if (closeDelay !== 0) {
      closeTimeoutRef.current = window.setTimeout(() => {
        setOpened(false);
      }, closeDelay);
    } else {
      setOpened(false);
    }
  };
  React.useEffect(() => () => {
    window.clearTimeout(openTimeoutRef.current);
    window.clearTimeout(closeTimeoutRef.current);
  }, []);
  return /* @__PURE__ */ React__default.createElement(Box.Box, __spreadValues({
    className: cx(classes.root, className),
    onMouseEnter: (event) => {
      handleOpen();
      typeof onMouseEnter === "function" && onMouseEnter(event);
    },
    onMouseLeave: (event) => {
      handleClose();
      typeof onMouseLeave === "function" && onMouseLeave(event);
    },
    onFocusCapture: handleOpen,
    onBlurCapture: handleClose,
    ref: mergedRefs
  }, others), /* @__PURE__ */ React__default.createElement(Transition.Transition, {
    mounted: visible,
    duration: transitionDuration,
    transition,
    exitDuration: transitionDuration,
    timingFunction: transitionTimingFunction
  }, (transitionStyles) => /* @__PURE__ */ React__default.createElement("div", {
    style: __spreadProps(__spreadValues({}, transitionStyles), { zIndex, position: "relative" })
  }, /* @__PURE__ */ React__default.createElement(Box.Box, {
    className: classes.body,
    ref: mergedTooltipRefs,
    sx: __spreadValues({
      whiteSpace: wrapLines ? "normal" : "nowrap",
      width
    }, coordinates)
  }, label))), children);
});
FloatingTooltip.displayName = "@mantine/core/FloatingTooltip";

exports.FloatingTooltip = FloatingTooltip;
//# sourceMappingURL=FloatingTooltip.js.map
