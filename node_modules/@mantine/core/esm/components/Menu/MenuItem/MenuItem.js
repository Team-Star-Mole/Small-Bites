import React, { forwardRef, useRef } from 'react';
import { mergeRefs } from '@mantine/hooks';
import { useMenuContext } from '../Menu.context.js';
import useStyles from './MenuItem.styles.js';
import { getContextItemIndex } from '../../../utils/get-context-item-index/get-context-item-index.js';
import { Box } from '../../Box/Box.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const _MenuItem = forwardRef((_a, ref) => {
  var _b = _a, {
    className,
    children,
    icon,
    color,
    disabled,
    rightSection,
    component,
    onClick
  } = _b, others = __objRest(_b, [
    "className",
    "children",
    "icon",
    "color",
    "disabled",
    "rightSection",
    "component",
    "onClick"
  ]);
  const itemRef = useRef();
  const { hovered, onItemHover, radius, onItemKeyDown, classNames, styles, onItemClick } = useMenuContext("Menu.Item");
  const { classes, cx } = useStyles({ color, radius }, { classNames, styles, name: "Menu" });
  const itemIndex = getContextItemIndex({ elementSelector: ".mantine-Menu-item", parentClassName: "mantine-Menu-body" }, itemRef.current);
  return /* @__PURE__ */ React.createElement(Box, __spreadValues({
    component: component || "button",
    type: "button",
    role: "menuitem",
    className: cx(classes.item, { [classes.itemHovered]: hovered === itemIndex }, className),
    onMouseEnter: () => !disabled && onItemHover(itemIndex),
    onMouseLeave: () => onItemHover(-1),
    onKeyDown: onItemKeyDown,
    ref: mergeRefs(ref, itemRef),
    disabled,
    onClick: (event) => {
      typeof onClick === "function" && onClick(event);
      onItemClick();
    }
  }, others), /* @__PURE__ */ React.createElement("div", {
    className: classes.itemInner
  }, icon && /* @__PURE__ */ React.createElement("div", {
    className: classes.itemIcon
  }, icon), /* @__PURE__ */ React.createElement("div", {
    className: classes.itemBody
  }, /* @__PURE__ */ React.createElement("div", {
    className: classes.itemLabel
  }, children), rightSection)));
});
const MenuItem = _MenuItem;
MenuItem.displayName = "@mantine/core/MenuItem";

export { MenuItem, _MenuItem };
//# sourceMappingURL=MenuItem.js.map
