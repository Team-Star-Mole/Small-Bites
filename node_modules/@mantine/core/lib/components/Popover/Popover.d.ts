import React from 'react';
import { DefaultProps, MantineNumberSize, MantineShadow, Selectors } from '@mantine/styles';
import { SharedPopperProps } from '../Popper';
import { PopoverBodyStylesNames } from './PopoverBody/PopoverBody';
import useStyles from './Popover.styles';
export declare type PopoverStylesNames = Selectors<typeof useStyles> | PopoverBodyStylesNames;
export interface PopoverProps extends DefaultProps<PopoverStylesNames>, SharedPopperProps, Omit<React.ComponentPropsWithoutRef<'div'>, 'title'> {
    /** Defines whether Popover can be closed with outside click, defaults to true */
    closeOnClickOutside?: boolean;
    /** Defines whether Popover should trap focus, defaults to true */
    trapFocus?: boolean;
    /** Defines whether Popover can be closed with Escape key, defaults to true */
    closeOnEscape?: boolean;
    /** Displays close button */
    withCloseButton?: boolean;
    /** True to disable popover */
    disabled?: boolean;
    /** True to display popover */
    opened: boolean;
    /** Called when popover closes */
    onClose?(): void;
    /** Element which is used to position popover */
    target: React.ReactNode;
    /** Content inside popover */
    children: React.ReactNode;
    /** Popover title */
    title?: React.ReactNode;
    /** Popover body padding, value from theme.spacing or number to set padding in px */
    spacing?: MantineNumberSize;
    /** Popover body radius, value from theme.radius or number to set border-radius in px */
    radius?: MantineNumberSize;
    /** Popover shadow, value from theme.shadows or string to set box-shadow to any value */
    shadow?: MantineShadow;
    /** aria-label for close button */
    closeButtonLabel?: string;
    /** useEffect dependencies to force update tooltip position */
    positionDependencies?: any[];
    /** Whether to render the popover in a Portal */
    withinPortal?: boolean;
    /** Popover body width */
    width?: number | string;
    /** Events that should trigger outside clicks */
    clickOutsideEvents?: string[];
}
export declare function Popover(props: PopoverProps): JSX.Element;
export declare namespace Popover {
    var displayName: string;
}
//# sourceMappingURL=Popover.d.ts.map