import { useState, useCallback, useEffect } from 'react';
import { useWindowEvent } from '../use-window-event/use-window-event.js';

function serializeJSON(value) {
  try {
    return JSON.stringify(value);
  } catch (error) {
    throw new Error("@mantine/hooks use-local-storage: Failed to serialize the value");
  }
}
function deserializeJSON(value) {
  try {
    return JSON.parse(value);
  } catch (e) {
    return value;
  }
}
function useLocalStorage({
  key,
  defaultValue = void 0,
  getInitialValueInEffect = false,
  deserialize = deserializeJSON,
  serialize = serializeJSON
}) {
  var _a;
  const [value, setValue] = useState(typeof window !== "undefined" && "localStorage" in window && !getInitialValueInEffect ? deserialize((_a = window.localStorage.getItem(key)) != null ? _a : void 0) : defaultValue != null ? defaultValue : "");
  const setLocalStorageValue = useCallback((val) => {
    if (val instanceof Function) {
      setValue((current) => {
        const result = val(current);
        window.localStorage.setItem(key, serialize(result));
        window.dispatchEvent(new CustomEvent("mantine-local-storage", { detail: { key, value: val(current) } }));
        return result;
      });
    } else {
      window.localStorage.setItem(key, serialize(val));
      window.dispatchEvent(new CustomEvent("mantine-local-storage", { detail: { key, value: val } }));
      setValue(val);
    }
  }, [key]);
  useWindowEvent("storage", (event) => {
    var _a2;
    if (event.storageArea === window.localStorage && event.key === key) {
      setValue(deserialize((_a2 = event.newValue) != null ? _a2 : void 0));
    }
  });
  useWindowEvent("mantine-local-storage", (event) => {
    if (event.detail.key === key) {
      setValue(event.detail.value);
    }
  });
  useEffect(() => {
    if (defaultValue !== void 0 && value === void 0) {
      setLocalStorageValue(defaultValue);
    }
  }, [defaultValue, value, setLocalStorageValue]);
  useEffect(() => {
    var _a2;
    if (getInitialValueInEffect) {
      setValue(deserialize((_a2 = window.localStorage.getItem(key)) != null ? _a2 : void 0) || (defaultValue != null ? defaultValue : ""));
    }
  }, []);
  return [value === void 0 ? defaultValue : value, setLocalStorageValue];
}
const useLocalStorageValue = useLocalStorage;

export { useLocalStorage, useLocalStorageValue };
//# sourceMappingURL=use-local-storage.js.map
