import { useState, useCallback, useEffect } from 'react';
import { useWindowEvent } from '../use-window-event/use-window-event.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const defaultValue = {
  downlink: 10,
  effectiveType: "4g",
  saveData: false,
  rtt: 50
};
function getConnection() {
  if (typeof navigator === "undefined") {
    return defaultValue;
  }
  const _navigator = navigator;
  const connection = _navigator.connection || _navigator.mozConnection || _navigator.webkitConnection;
  if (!connection) {
    return defaultValue;
  }
  return {
    downlink: connection == null ? void 0 : connection.downlink,
    effectiveType: connection == null ? void 0 : connection.effectiveType,
    saveData: connection == null ? void 0 : connection.saveData,
    rtt: connection == null ? void 0 : connection.rtt
  };
}
function useNetwork() {
  const [status, setStatus] = useState(__spreadValues({ online: true }, getConnection()));
  const handleConnectionChange = useCallback(() => setStatus((current) => __spreadValues(__spreadValues({}, current), getConnection())), []);
  useWindowEvent("online", () => setStatus(__spreadValues({ online: true }, getConnection())));
  useWindowEvent("offline", () => setStatus(__spreadValues({ online: false }, getConnection())));
  useEffect(() => {
    if (navigator.connection) {
      navigator.connection.addEventListener("change", handleConnectionChange);
      return () => navigator.connection.removeEventListener("change", handleConnectionChange);
    }
    return void 0;
  }, []);
  return status;
}

export { useNetwork };
//# sourceMappingURL=use-network.js.map
