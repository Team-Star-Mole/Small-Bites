interface UseLocalStorage<T> {
    /** Local storage key */
    key: string;
    /** Default value that will be set if value is not found in local storage */
    defaultValue?: T;
    /** If set to true, value will be update is useEffect after mount */
    getInitialValueInEffect?: boolean;
    /** Function to serialize value into string to be save in local storage */
    serialize?(value: T): string;
    /** Function to deserialize string value from local storage to value */
    deserialize?(value: string): T;
}
export declare function useLocalStorage<T = string>({ key, defaultValue, getInitialValueInEffect, deserialize, serialize, }: UseLocalStorage<T>): readonly [T, (val: T | ((prevState: T) => T)) => void];
export declare const useLocalStorageValue: typeof useLocalStorage;
export {};
//# sourceMappingURL=use-local-storage.d.ts.map